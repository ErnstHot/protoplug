/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"
#include "guiclasses/ProtoPopout.h"


#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4355) // 'this' used in base member initializer list
#endif
//==============================================================================
LuaProtoplugJuceAudioProcessorEditor::LuaProtoplugJuceAudioProcessorEditor (LuaProtoplugJuceAudioProcessor* ownerFilter)
    : AudioProcessorEditor (ownerFilter),
	content(this, ownerFilter),
	yank("bring to front"),
	popin("pop back in")
{
	docwin = 0;
	processor = ownerFilter;
	ownerFilter->setProtoEditor(&content);
	addChildComponent(&yank);
	addChildComponent(&popin);
	yank.addListener(this);
	popin.addListener(this);
	//yank.setLookAndFeel(&laf);
	//popin.setLookAndFeel(&laf);
	yank.setBounds(20, 50, 150, 30);
	yank.setCentrePosition(140, 60);
	popin.setBounds(20, 95, 150, 30);
	popin.setCentrePosition(140, 102);

	if (processor->popout){
		content.setSize(ownerFilter->lastUIWidth,
				        ownerFilter->lastUIHeight);
		popOut();
	} else {
		addAndMakeVisible(&content);
		content.takeFocus();
		setSize (ownerFilter->lastUIWidth,
				 ownerFilter->lastUIHeight);
	}
}
#ifdef _MSC_VER
#pragma warning(pop)
#endif

LuaProtoplugJuceAudioProcessorEditor::~LuaProtoplugJuceAudioProcessorEditor()
{
	if (docwin!=0) {
		processor->lastPopoutX = docwin->getX();
		processor->lastPopoutY = docwin->getY();
	}
	content.saveCode();
}

void LuaProtoplugJuceAudioProcessorEditor::paint (Graphics& g)
{
	g.fillAll (Colours::white);
	if (docwin==0) return;
    g.setColour (Colours::black);
    g.setFont (15.0f);
    g.drawFittedText ("interface popped out",
                      0, 0, 280, 50,
                      Justification::centred, 1);
}

void LuaProtoplugJuceAudioProcessorEditor::resized()
{
	if (docwin==0)
		content.setBounds(0, 0, getWidth(), getHeight());
}

void LuaProtoplugJuceAudioProcessorEditor::buttonClicked(Button *b)
{
	if (docwin==0) return;
	if (b==&yank)
		docwin->toFront(true);
	else if (b==&popin)
		popIn();
}

void LuaProtoplugJuceAudioProcessorEditor::popOut()
{
	docwin = new ProtoPopout(this, processor->getName(), Colours::white, DocumentWindow::allButtons, true);
	docwin->setAlwaysOnTop(processor->alwaysontop);
	docwin->setResizable(true, false);
	docwin->setUsingNativeTitleBar(true);
	docwin->setContentNonOwned(&content, true);
	processor->popout = true;
	docwin->setContentComponentSize(processor->lastUIWidth, processor->lastUIHeight);
	docwin->setTopLeftPosition(processor->lastPopoutX, processor->lastPopoutY);
	content.setPoppedOut(true);
	docwin->setVisible(true);
	setSize (280, 130);
	yank.setVisible(true);
	content.takeFocus();
	popin.setVisible(true);
}

void LuaProtoplugJuceAudioProcessorEditor::popIn()
{
	processor->lastUIWidth = 670;
	processor->lastUIHeight = 455;
	if (docwin!=0) {
		processor->lastPopoutX = docwin->getX();
		processor->lastPopoutY = docwin->getY();
	}
	processor->popout = false;
	int w=processor->lastUIWidth, h=processor->lastUIHeight;
	addAndMakeVisible(&content);
	content.setPoppedOut(false);
	setSize (w,h);
	content.setSize (w,h);
	docwin = 0;
	yank.setVisible(false);
	content.takeFocus();
	popin.setVisible(false);
	//content.resized();
}

void LuaProtoplugJuceAudioProcessorEditor::handleCommandMessage(int com)
{
	if (com==MSG_POPOUT && !processor->popout)
	{
		popOut();
	}
	else if (com==MSG_POPOUT && processor->popout)
	{
		popIn();
	}
	else if (com==MSG_ALWAYSONTOP)
	{
		processor->alwaysontop = !processor->alwaysontop;
		if (docwin!=0)
			docwin->setAlwaysOnTop(processor->alwaysontop);
	}
}
